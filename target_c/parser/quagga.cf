entrypoints Module ;

token UIdent (upper (letter | digit | '_')*) ;
token LIdent (lower (letter | digit | '_')*) ;
token InfixToken (('-' | '+' | '/' | '*' | '<' | '>' | '|' | '&')+) ;

VarTerm.        Term        ::= LIdent ;
StrTerm.        Term        ::= String ;
IntTerm.        Term        ::= Integer ;

InfxExp.        Exp         ::= Exp InfixToken Exp ;
ApplExp.        Exp         ::= Exp Term ;
ParenExp.       Exp         ::= "(" Exp ")" ;

TermPattern.    PatternItem ::= Term ;
DiscardPattern. PatternItem ::= "_" ;
separator PatternItem " " ;

Pattern.        Pattern     ::= UIdent [PatternItem] ;

ConstructorArg. ConsArg     ::= LIdent ;
separator ConsArg " " ;

MutableVar.     ClassItem   ::= "mutable" LIdent "=" Exp ;
ConstantVar.    ClassItem   ::= "constant" LIdent "=" Exp ;
Equation.       ClassItem   ::= LIdent Pattern "=" Exp ;
Constructor.    ClassItem   ::= "constructor" LIdent [ConsArg] "=" Exp ;
separator ClassItem ";" ;
terminator ClassItem ";" ;

ClassBody.      ClassBody   ::= "{" [ClassItem] "}" ;

Class.          Module      ::= "class" ClassBody ;
Singleton.      Module      ::= "object" ClassBody ;
