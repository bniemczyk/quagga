nil = {} ;

cons = lambda e lst . { e, lst } ;

head = lambda lst .
    let { h, t } = lst in
    h ;

tail = lambda lst .
    let { h, t } = lst in
    t ;

map = 
    letrec rmap = lambda f lst .
        if (arity lst) == 0
            then nil
            else let {h,t} = lst in (cons (f h) (rmap f t))
    in rmap;

or = lambda a b . if a then true else b ;

and = lambda a b . if a 
                    then if b 
                        then true 
                        else false 
                    else false ;

take =
    letrec tak = lambda n lst .
        if n == 1
            then cons (head lst) nil
            else cons (head lst) (tak ( n - 1 ) (tail lst))
    in tak ;

len = letrec len_ = lambda lst .
    if (arity lst) == 0 
        then 0
        else 1 + len_ (tail lst)
    in len_ ;

foldr =
    letrec zw = lambda f init lst .
        if (arity lst) == 0
            then init
            else f (head lst) (zw f init (tail lst))
    in zw ;

foldl =
    letrec fl = lambda f init lst .
        if (arity lst) == 0
            then init
            else let { h, t } = lst in
                (fl f (f init h)) t
    in fl;

