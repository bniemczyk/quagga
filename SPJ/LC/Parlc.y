-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module SPJ.LC.Parlc where
import SPJ.LC.Abslc
import SPJ.LC.Lexlc
import SPJ.LC.ErrM
}

%name pProgram Program

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 ';' { PT _ (TS ";") }
 '=' { PT _ (TS "=") }
 '(' { PT _ (TS "(") }
 ')' { PT _ (TS ")") }
 '.' { PT _ (TS ".") }
 'lambda' { PT _ (TS "lambda") }

L_ident  { PT _ (TV $$) }
L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
String  :: { String }  : L_quoted { $1 }
Integer :: { Integer } : L_integ  { (read $1) :: Integer }

Program :: { Program }
Program : ListStm { Prog (reverse $1) } 


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm ';' { flip (:) $1 $2 }


Stm :: { Stm }
Stm : Ident '=' Exp { Equality $1 $3 } 


Exp :: { Exp }
Exp : '(' Exp ')' { PExp $2 } 
  | String { ConstantStringTerm $1 }
  | Integer { ConstantIntTerm $1 }
  | Ident { VariableTerm $1 }
  | Exp Exp { ApplicationTerm $1 $2 }
  | 'lambda' Ident '.' Exp { AbstractionTerm $2 $4 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
}

