module SPJ.LC.Abslc where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Prog [Stm]
  deriving (Eq,Ord,Show)

data Stm =
   Equality Ident Exp
  deriving (Eq,Ord,Show)

data Exp =
   PExp Exp
 | ConstantStringTerm String
 | ConstantIntTerm Integer
 | VariableTerm Ident
 | ApplicationTerm Exp Exp
 | AbstractionTerm Ident Exp
  deriving (Eq,Ord,Show)

walkExp :: (Exp -> Exp) -> Exp -> Exp
walkExp fn exp = let walk = walkExp fn in
    case exp of
        PExp e -> fn $ walk e
        ApplicationTerm e1 e2 -> fn $ ApplicationTerm (walk e1) (walk e2)
        AbstractionTerm id exp -> fn $ AbstractionTerm id (walk exp)
        -- default
        e -> fn e
