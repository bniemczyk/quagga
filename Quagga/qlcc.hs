-- automatically generated by BNF Converter
module Main where


import IO ( stdin, hGetContents )
import System ( getArgs, getProgName )

import Quagga.LC.Lexlc
import Quagga.LC.Parlc
import Quagga.LC.Printlc
import Quagga.LC.Abslc
import Quagga.LC.Genhaskell

import Quagga.LC.ErrM
import Quagga.LC.Simplify

import Data.Binary
import Quagga.LC.ByteCode
import qualified Data.ByteString.Lazy as BS

import Quagga.LC.Graph

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = if v > 1 then putStrLn s else return ()

runFile v p f = readFile f >>= run v p

run v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok tree -> BS.putStr . encode $ simplifyProg tree
           -- Err e -> putStrLn e

simplify v p s = let ts = myLLexer s in case p ts of
           Bad s    -> do putStrLn "\nParse              Failed...\n"
                          putStrV v "Tokens:"
                          putStrV v $ show ts
                          putStrLn s
           Ok tree -> putStrLn $ printTree (simplifyProg tree)
           -- Err e -> putStrLn e


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
 = do
      putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
      putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

main :: IO ()
main = do args <- getArgs
          case args of
            [] -> hGetContents stdin >>= run 2 pProgram
            ["-ls"] -> hGetContents stdin >>= simplify 2 pProgram
            "-s":fs -> mapM_ (runFile 0 pProgram) fs
            fs -> mapM_ (runFile 2 pProgram) fs
