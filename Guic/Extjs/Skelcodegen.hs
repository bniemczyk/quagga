module Skelcodegen where

-- Haskell module generated by the BNF converter

import Abscodegen
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transWidgetType :: WidgetType -> Result
transWidgetType x = case x of
  Button  -> failure x


transParameter :: Parameter -> Result
transParameter x = case x of
  Param object  -> failure x


transNum :: Num -> Result
transNum x = case x of
  NumDouble n0 n  -> failure x
  NumInteger n  -> failure x


transDKey :: DKey -> Result
transDKey x = case x of
  DictKeyIdent id  -> failure x
  DictKeyString str  -> failure x


transDValue :: DValue -> Result
transDValue x = case x of
  DictValue object  -> failure x


transDItem :: DItem -> Result
transDItem x = case x of
  DictItem dkey dvalue  -> failure x


transDictionary :: Dictionary -> Result
transDictionary x = case x of
  Dict ditems  -> failure x


transArray :: Array -> Result
transArray x = case x of
  Arr objects  -> failure x


transObject :: Object -> Result
transObject x = case x of
  ObjIdent id  -> failure x
  ObjString str  -> failure x
  ObjNumb num  -> failure x
  ObjDictionary dictionary  -> failure x
  ObjArray array  -> failure x


transWidgetParams :: WidgetParams -> Result
transWidgetParams x = case x of
  WParams parameters dictionary  -> failure x
  WNoParams dictionary  -> failure x


transWidget :: Widget -> Result
transWidget x = case x of
  NewWidget widgettype widgetparams  -> failure x



