trip = lambda a b c . { a, b, c } ;

hundred = 
    let { x, y, z } = trip 2 40 20 in 
    (x * y) + z ;

naturals =
    letrec nats = lambda n . cons n (nats (n + 1)) in
    nats 1 ;

evens = map (lambda n . n * 2) naturals ;

sum = foldl (lambda x y . x + y) 0 ;

product = foldl (lambda x y . x * y) 1 ;

fact = lambda n . product (take n naturals) ;

fastfact = 
    letrec f = lambda n . if n == 1 then 1 else n * f (n - 1) in
    f ;

// main is executed by qlcr
main = hundred
    ;
